// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  position   String?
  department String?
  role       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  serviceOrders  ServiceOrder[] @relation("Gestor")
  purchaseOrders PurchaseOrder[] @relation("PurchaseOrderGestor") // Nueva relación
}
enum CompanyType {
  CLIENT
  PROVIDER
}
model Client {
  id                 String    @id @default(cuid())
  name               String
  ruc                String    @unique
  address            String
  type               CompanyType
  email              String
  contactPerson      String?
  creditLine         Float?
  paymentMethod      String?
  startDate          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  // Relations
  quotations     Quotation[]
  serviceOrders  ServiceOrder[]
  purchaseOrders PurchaseOrder[]
}

model Equipment {
  id             String    @id @default(cuid())
  name           String
  type           String
  code           String    @unique
  description    String
  components     Json?
  status         String
  isCalibrated   Boolean?
  calibrationDate DateTime?
  serialNumber   String?
  observations   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
}

model Quotation {
  id                   String    @id @default(cuid())
  number               String    @unique
  date                 DateTime
  clientId             String
  currency             String
  equipmentReleaseDate DateTime
  subtotal             Float
  igv                  Float
  total                Float
  validityDays         Int
  status               String
  notes                String?
  considerDays         Int?
  returnDate           DateTime?
  monitoringLocation   String?
  creditLine           Float?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?

  // Relations
  client Client        @relation(fields: [clientId], references: [id])
  items  QuotationItem[]
}

model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String?
  quotation   Quotation? @relation(fields: [quotationId], references: [id])
  description String
  code        String
  quantity    Int
  days        Int
  unitPrice   Float
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@index([quotationId])
}

model ServiceOrder {
  id                  String    @id @default(cuid())
  number              String    @unique
  date                DateTime
  clientId            String
  description         String?
  currency            String
  paymentTerms        String?
  gestorId            String
  attendantName       String?
  subtotal            Float
  igv                 Float
  total               Float
  comments            String?
  status              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  // Relations
  client Client              @relation(fields: [clientId], references: [id])
  gestor User                @relation("Gestor", fields: [gestorId], references: [id])
  items  ServiceOrderItem[]
}

model ServiceOrderItem {
  id             String   @id @default(cuid())
  serviceOrderId String
  serviceOrder ServiceOrder @relation(fields: [serviceOrderId], references: [id], onDelete: Cascade)
  code           String
  description    String
  quantity       Int
  unitPrice      Float
  days           Int?
  name           String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
}

model PurchaseOrder {
  id                  String    @id @default(cuid())
  number              String    @unique
  date                DateTime
  clientId            String
  description         String?   // Nuevo campo añadido
  currency            String
  paymentTerms        String?   // Nuevo campo añadido
  gestorId            String    // Nuevo campo añadido
  attendantName       String?   // Nuevo campo añadido
  subtotal            Float
  igv                 Float
  total               Float
  comments            String?   // Cambiado de notes a comments
  status              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?

  // Relations
  client Client              @relation(fields: [clientId], references: [id])
  gestor User                @relation("PurchaseOrderGestor", fields: [gestorId], references: [id]) // Nueva relación
  items  PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id              String   @id @default(cuid())
  code            String
  purchaseOrderId String
  description     String
  quantity        Int
  unitPrice       Float
  name            String
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Company {
  id      String @id @default(cuid())
  name    String
  ruc     String @unique
  address String
  email   String
  phone   String
  logo    String?

  // Relations
  bankAccounts BankAccount[]
}

model BankAccount {
  id           String  @id @default(cuid())
  companyId    String
  bankName     String
  accountNumber String
  accountType  String
  currency     String
  isDefault    Boolean @default(false)

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

